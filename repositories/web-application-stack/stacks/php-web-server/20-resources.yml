version: "3.7"
services:
  minio:
    image: minio/minio:latest
    command: ["minio", "server", "/data"]
    environment:
      - MINIO_ACCESS_KEY=${BACKING_SERVICES_USER}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD}
    volumes:
      - type: volume
        source: minio_data
        target: /data
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 256mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: any
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

  minio_constructor:
    image: minio/mc:latest
    entrypoint: >
      sh -c "
        /usr/bin/mc config host add myminioserver http://minio:9000 '${BACKING_SERVICES_USER}' '${MINIO_PASSWORD}';
        /usr/bin/mc mb myminioserver/myminiobucket;
        /usr/bin/mc policy download myminioserver/myminiobucket;
        exit 0
      "
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 64mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: on-failure
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

  mongo:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${BACKING_SERVICES_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - type: volume
        source: mongo_config
        target: /data/configdb
      - type: volume
        source: mongo_data
        target: /data/db
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 256mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: any
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

  mysql:
    image: mysql:5 #:latest
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${BACKING_SERVICES_USER}
      - MYSQL_PASSWORD
      - MYSQL_DATABASE=db0
    volumes:
      - type: volume
        source: mysql_data
        target: /var/lib/mysql
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 256mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: any
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${BACKING_SERVICES_USER}
      - POSTGRES_PASSWORD
      - POSTGRES_DB=db0
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 256mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: any
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

  rabbitmq:
    image: rabbitmq:latest
    environment:
      - RABBITMQ_DEFAULT_USER=${BACKING_SERVICES_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - type: volume
        source: rabbitmq_data
        target: /var/lib/rabbitmq
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 256mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: any
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

  redis:
    image: redis:latest
    command: ["--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - type: volume
        source: redis_data
        target: /data
    deploy:
      resources:
        reservations:
          cpus: "0.10"
          memory: 256mb
        limits:
          cpus: "1.00"
          memory: 1gb
      restart_policy:
        condition: any
        delay: "0"
      labels:
        - version=${VERSION}
    labels:
      - version=${VERSION}

volumes:
  minio_data:
    driver: local
  mongo_config:
    driver: local
  mongo_data:
    driver: local
  mysql_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
